name: Create Third Party License Report 

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag to run the workflow on'
        required: true
        default: 'develop'
jobs:
  create-page:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.ref }}

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16' # Specify the Node.js version you are using

    - name: Install dependencies
      run: yarn install

    - name: Get licenses in JSON format
      id: read_json1
      run:  |
        echo $GITHUB_REPOSITORY
        pwd
        yarn licenses list --json > licenses.json

    - name: Upload generated license.json as artifact
      uses: actions/upload-artifact@v3
      with:
        name: license-json
        path: ${GITHUB_WORKSPACE}/license.json
          
    - name: Read JSON file
      id: read_json
      run: |
        JSON_CONTENT=$(cat licenses.json)
        echo "::set-output name=json_content::$JSON_CONTENT"

    # Python way ------------------- start  
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Specify the Python version you need

    - name: Install dependencies
      run: |
        python --version
        ls
        python -m pip install --upgrade pip
        pip install requests==2.32.3
        pip install pandas==2.2.2
        
    - name: Create Confluence Page
      env:
        CONFLUENCE_BASE_URL: ${{ secrets.CONFLUENCE_BASE_URL_SP }}
        CONFLUENCE_API_TOKEN: ${{ secrets.CONFLUENCE_API_TOKEN_SP }}
        CONFLUENCE_USERNAME: ${{ secrets.CONFLUENCE_USERNAME_SP }}
        CONFLUENCE_SPACE_KEY: ${{ secrets.CONFLUENCE_SPACE_KEY_SP }}
        PAGE_CONTENT: ${{ steps.read_json.outputs.json_content }}
        BRANCH_NAME: ${{ github.event.inputs.ref }}
      run:  |
          page_string=$(echo ${{ env.PAGE_CONTENT }} | jq -Rsa .)
          python -c "
          import requests
          import os
          import sys
          from requests.auth import HTTPBasicAuth
          import json
          import pandas as pd

          username = os.getenv('CONFLUENCE_USERNAME')
          api_token = os.getenv('CONFLUENCE_API_TOKEN')
          space_key = os.getenv('CONFLUENCE_SPACE_KEY')
          json_data = os.getenv('PAGE_CONTENT')
          repo_name = os.getenv('GITHUB_REPOSITORY')
          branch_name = os.getenv('BRANCH_NAME')
          parent_page_id = '2033221634'
          
          # Replace these variables with your Confluence instance details
          confluence_base_url = 'https://ozoneapi.atlassian.net/wiki/rest/api/content/'
          
          # Set up the authentication
          auth = HTTPBasicAuth(username, api_token)
          
          if json_data is None:
              raise ValueError('JSON_STRING environment variable is not set')
          
          # Parse JSON string into Python data structure
          try:
              data = json.loads(json_data)
          except json.JSONDecodeError as e:
              raise ValueError(f'Error decoding JSON: {e}')
          
          # Extract headers and body from JSON data
          if 'data' in data and 'body' in data['data'] and 'head' in data['data']:
              headers = data['data']['head']
              body = data['data']['body']
          else:
              raise ValueError('JSON data format is not correct')
          
          # Convert data to DataFrame
          try:
              df = pd.DataFrame(body, columns=headers)
          except Exception as e:
              raise ValueError(f'Error creating DataFrame: {e}')
          
          # Convert DataFrame to HTML table
          html_table = df.to_html(index=False)
          
          # Function to create a new page in Confluence
          def create_confluence_page(space_key, title, content):
              url = f'{confluence_base_url}'
              headers = {
                  'Content-Type': 'application/json',
              }
              payload = {
                  'type': 'page',
                  'title': title,
                  'space': {
                      'key': space_key
                  },
                  'ancestors': [{'id': parent_page_id}],
                  'body': {
                      'storage': {
                          'value': content,
                          'representation': 'storage'
                      }
                  }
              }
          
              response = requests.post(url, headers=headers, json=payload, auth=auth)
          
              if response.status_code == 200 or response.status_code == 201:
                  print('Page created successfully!')
                  print('Page URL:', response.json().get('_links').get('webui'))
              else:
                  print('Failed to create page:', response.status_code)
                  print('Response:', response.text)
          
          #Creating confluence Page
          title = 'License Report: pubrepo'
          content = '<h2>License Report: pubrepo</h2>' + html_table
          create_confluence_page(space_key, title, content)
          "

      # Python way ------------------- end      
